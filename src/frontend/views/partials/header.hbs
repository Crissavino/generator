<header class="header navbar-area" id="header">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <nav class="navbar custom navbar-expand-lg">
                    <a class="navbar-brand" href="/">
                        NFT CREATOR
                    </a>
                    {{#isEqual isAuthenticated true}}
                        <div class="profile-dropdown">
                            <a class="navbar-brand profile-dropdown-title" onclick="toggleProfileMenu()" id="profileDropdown">
                               Profile
                            </a>
                            <ul class="dropdown-menu profile-dropdown-menu" id="profileDropdownMenu">
                                <li>
                                    <a class="navbar-brand profile-dropdown-link" href="/user/area/{{authUser.uuid}}">
                                        User Area
                                    </a>
                                </li>
                                <li>
                                    <a class="navbar-brand profile-dropdown-link" href="/api/v1/auth/logout/{{authUser.uuid}}">
                                        Logout
                                    </a>
                                </li>
                            </ul>
                        </div>
                    {{/isEqual}}

                    {{#isEqual isAuthenticated false}}
                        <div class="d-flex flex-column justify-content-center">
                            <button
                                    type="submit"
                                    class="btn login-button navbar-brand d-flex flex-column align-items-center"
                                    style="background-color: transparent; border: none"
                                    onclick="login()"
                            >
                                <div class="logo-container" id="logo-container2"></div>
                                Login
                            </button>
                        </div>
                        <script src="/js/metamaskLogo2.js"></script>
                    {{/isEqual}}

<!--                    <button class="navbar-toggler" type="button" data-toggle="collapse"-->
<!--                            data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"-->
<!--                            aria-expanded="false" aria-label="Toggle navigation">-->
<!--                        <span class="toggler-icon"></span>-->
<!--                        <span class="toggler-icon"></span>-->
<!--                        <span class="toggler-icon"></span>-->
<!--                    </button>-->

                    <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                    </div> <!-- navbar collapse -->
                </nav> <!-- navbar -->
            </div>
        </div> <!-- row -->
    </div> <!-- container -->

</header>

<script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

    function toggleProfileMenu() {
        console.log('asdasd')
        let profileDropdownMenu = document.getElementById('profileDropdownMenu');
        if (profileDropdownMenu.classList.contains('show')) {
            profileDropdownMenu.classList.remove('show');
        } else {
            profileDropdownMenu.classList.add('show');
        }

    }

    async function login() {

        try {

            let accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            let publicAddress = accounts[0];

            // is address already in backend
            await fetch(`/api/v1/auth/${publicAddress}`, {
                method: 'get',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (data) {
                        if (data.success) {
                            return data.user;
                        } else {
                            // show swal with message You are not registered yet
                            return Swal.fire({
                                title: 'You are not registered yet',
                                text: 'Please create your NFT art to login or maybe you registered with another account',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Create!'
                            }).then((result) => {
                                if (result.value) {
                                    window.location.href = '/nft-creation/first-step';
                                }
                            })
                        }
                    })
                    .then(await handleSignMessage)
                    .then(await handleAuthentication)
                    .catch(function (error) {
                        console.log(error);
                    });

        } catch (e) {
            console.log(e)
            console.log(e.code)
            console.log(e.message)

        }

    }

    let handleSignMessage = async ({ publicAddress, nonce }) => {
        if (!publicAddress || !nonce) {
            return Swal.fire(
                    'Oops...',
                    'Something went wrong, please try again!',
                    'error'
            ).then(() => {
                window.location.href = '/';
            });
        }
        console.log('handleSignMessage')
        console.log({publicAddress, nonce})
        console.log('handleSignMessage')
        const msg = `
        Welcome back to NFT Creator!
        You are signing in with this nonce: ${nonce}
        this will change after a successful login for
        security reasons.`;

        return await window.ethereum.request({ method: 'personal_sign', params: [msg, publicAddress] })
                .then(signature => {
                    console.log({ publicAddress, nonce, signature })
                    return { publicAddress, nonce, signature, msg };
                })
                .catch(error => {
                    console.log(error);
                    return {
                        success: false
                    };
                });

        // return new Promise((resolve, reject) =>
        //         window.ethereum.request({ method: 'personal_sign', params: [msg, publicAddress] })
        //                 .then(signature => {
        //                     console.log({ publicAddress, nonce, signature })
        //                     resolve({ publicAddress, nonce, signature })
        //                 })
        //                 .catch(reject)
        // );
    };

    let handleAuthentication = async ({ publicAddress, nonce, signature, msg }) => {
        if (!publicAddress || !nonce || !signature || !msg) {
            return Swal.fire(
                    'Oops...',
                    'Something went wrong, please try again!',
                    'error'
            ).then(() => {
                window.location.href = '/';
            });
        }
        console.log('handleAuthentication')
        console.log({ publicAddress, nonce, signature })
        console.log('handleAuthentication')
        const isLogin = true;
        await fetch(`/api/v1/auth/authenticate`, {
            body: JSON.stringify({ publicAddress, nonce, signature, isLogin, msg }),
            headers: {
                'Content-Type': 'application/json'
            },
            method: 'POST'
        })
            .then(response => response.json())
            .then(data => {
                console.log('handleAuthentication response')
                console.log(data)
                console.log('handleAuthentication response')
                if (data.success) {
                    // connect metamask account
                    window.ethereum.enable().then(() => {
                        console.log('metamask connected')
                        window.location.href = `/user/area/${data.user.uuid}`
                    })
                } else {
                    Swal.fire({
                        title: 'Authentication failed',
                        text: 'Please try again',
                        type: 'error',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Try again!'
                    }).then((result) => {
                        if (result.value) {
                            window.location.reload();
                        }
                    })
                }
            })

    }
</script>