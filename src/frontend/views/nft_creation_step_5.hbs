<!-- ========================= hero-section start ========================= -->
<section id="home" class="hero-section">
    <div class="container">
        <div class="col-12 col-lg-8 p-3 mx-auto text-center big-white-modal">
            <form id="fifthStepForm" action="{{ saveFifthStepUrl }}" method="post">

                {{#each layers}}
                    <div id="allocateTraitContainer" class="allocate-trait-container">
                        <div class="titles-container mb-4">
                            <h5 class="mb-3">For the trait "{{ name }}" how many of each variant should be used?</h5>
                            <p class="mb-2">
                                This must add up to #{{ ../totalNFTToGenerate }}, the total number of NFTs you are generating.
                            </p>
                            <p class="mb-0" style="font-size: 14px">
                                Number left to allocate: #{{ ../totalNFTToGenerate }}
                            </p>
                        </div>

                        <div class="buttons-to-allocate-container row justify-content-center">
                            <button onclick="allocateTraitEvenly(`{{ name }}`, {{json files }}, {{ ../totalNFTToGenerate }})" type="button" class="btn btn-primary-custom mr-lg-4 mb-2 mb-lg-0 col-8 col-lg-3">Allocate Evenly</button>
                            <button onclick="allocateTraitFromSpreadsheet(`{{ name }}`, {{json files }})" type="button" class="btn btn-primary-custom col-8 col-lg-3">Paste from CSV or TSV</button>
                        </div>

                        <div class="col-12 col-lg-6 my-5 mx-auto variants-container" id="variantContainerOf-{{ name }}">
                            {{#each files}}
                                <div class="col-10 variant">
                                    <div class="col-4 text-right d-flex">
                                        <span class="variant-name">{{ name }}</span>
                                    </div>
                                    <div class="col-4">
                                        <input type="number" name="variant" id="variant" class="variant-allocate-input-of-{{@key}} form-control custom">
                                    </div>
                                    <div class="col-2 text-left">
                                        <span class="variant-allocate-percentage-of-{{ name }}">0%</span>
                                    </div>
                                </div>
                            {{/each}}
                        </div>
                </div>
                {{/each}}

                <div class="btn-container mt-4 mx-auto text-center">
                    <a href="{{ previousStepUrl }}" type="button" id="nextButton" class="btn text-white next-button mr-4">Back</a>
                    <button type="submit" id="nextButton" class="btn text-white next-button">Next</button>
                </div>
            </form>
        </div>
    </div>

</section>

<!-- ========================= hero-section end ========================= -->

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .swal2-html-container {
        margin-top: 0 !important;
    }
</style>
<script>

    function allocateTraitFromSpreadsheet(traitToAllocate, files) {
        Swal.fire({
            title: `Paste your ${traitToAllocate} allocation from a spreadsheet`,
            html:
                    `<p style="font-size: 14px" class="mb-4">Paste in a comma-separated format and click "Use it!"</p>` +
                    `<div class="col-12 m-auto copy-from-csv">` +
                    ((files.length > 1)
                            ? `<textarea rows="10" cols="10" id="csvTextarea" class="form-control w-75 m-auto" placeholder="${files[0].name}, 1000 \n${files[1].name}, 1000"></textarea>`
                            : `<textarea rows="10" cols="10" id="csvTextarea" class="form-control w-75 m-auto" placeholder="${files[0].name}, 1000"></textarea>`) +
                    `</div>`,
            showCloseButton: true,
            showCancelButton: false,
            confirmButtonText: 'Use it!',
        }).then((result) => {
            if (result.isConfirmed) {
                let variantContainer = document.getElementById('variantContainerOf-' + traitToAllocate);
                let allVariantInput = variantContainer.querySelectorAll('[class^="variant-allocate-input-of-"]');
                let csvTextarea = document.getElementById('csvTextarea');
                let csvText = csvTextarea.value.trim();
                if (csvText === '' || csvText === undefined) return;
                let csvArrayByNewLine = csvText.split('\n');
                csvArrayByNewLine.forEach(function (csvLine, index) {
                    let csvArrayByComma = csvLine.split(',');
                    if (csvLine.trim() === '') return;
                    let variantName = csvArrayByComma[0].trim();
                    let variantAllocation = parseInt(csvArrayByComma[1].trim());
                    files.forEach(function (file, index) {
                        if (file.name === variantName) {
                            allVariantInput[index].value = variantAllocation;
                            allVariantInput[index].dispatchEvent(new Event('change'));
                        }
                    });
                });

            }
        })
    }

    function allocateTraitEvenly(traitToAllocate, files, totalNftToGenerate) {
        let evenlyNumber = Math.floor(totalNftToGenerate / files.length);
        let remainder = totalNftToGenerate % files.length;
        let variantContainer = document.getElementById('variantContainerOf-' + traitToAllocate);
        let allVariantInput = variantContainer.querySelectorAll('[class^="variant-allocate-input-of-"]');
        files.forEach(function (file, index) {
            allVariantInput[index].value = evenlyNumber;
            allVariantInput[index].dispatchEvent(new Event('change'));
        });
        if (remainder > 0) {
            allVariantInput[files.length - 1].value = evenlyNumber + remainder;
            allVariantInput[files.length - 1].dispatchEvent(new Event('change'));
        }
    }
</script>