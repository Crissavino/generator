<!-- ========================= hero-section start ========================= -->
<section id="home" class="hero-section">
    <div class="container">
        <div class="col-12 col-lg-8 p-3 mx-auto text-center big-white-modal">
            <form id="fifthStepForm" class="mx-auto col-10" action="{{ saveFifthStepUrl }}" method="post">

                {{#each layers}}
                    <div>
                        <div class="layer-title white-modal"
                             onclick="animateLayer(this)"
                             onmouseover="animateLayerTitleOnMouseEnter(this)"
                             onmouseleave="animateLayerTitleOnMouseLeave(this)">
                            <lottie-player src="https://assets7.lottiefiles.com/packages/lf20_k1ejm9vc.json"
                                           background="transparent"
                                           speed="1.5"
                                           style="width: 128px; transform: rotate(180deg); position: relative; top: 4px;"
                                           class="lottie-player"
                            ></lottie-player>
                            <h4 class="">
                                "{{ name }}" layer
                            </h4>
                        </div>

                        <div class="allocate-trait-container d-none white-modal">
                            <div class="titles-container mb-4">
                                <h6 class="">
                                    For the trait "{{ name }}" how many of each variant should be used?
                                </h6>
                                <p class="mb-2">
                                    This must add up to #{{ ../totalNFTToGenerate }}, the total number of NFTs you are
                                    generating.
                                </p>
                                <p class="mb-0 number-left-text" style="font-size: 14px">
                                    Number left to allocate: #{{ ../totalNFTToGenerate }}
                                </p>
                            </div>

                            <div class="buttons-to-allocate-container row justify-content-center">
                                <button onclick="allocateTraitEvenly(`{{ name }}`, {{json
                                        files }}, {{ ../totalNFTToGenerate }})" type="button"
                                        class="btn theme-btn btn-primary-custom mr-lg-4 mb-2 mb-lg-0 col-9 col-lg-3">Allocate
                                    Evenly
                                </button>
                                <button onclick="allocateTraitFromSpreadsheet(`{{ name }}`, {{json
                                        files }}, {{ ../totalNFTToGenerate }})" type="button"
                                        class="btn theme-btn btn-primary-custom col-9 col-lg-4">Paste from CSV or TSV
                                </button>
                            </div>

                            <div class="col-12 col-lg-6 my-5 mx-auto variants-container"
                                 id="variantContainerOf-{{ name }}">
                                {{#each files}}
                                    <div class="col-10 variant">
                                        <div class="col-4 text-right d-flex">
                                            <span class="variant-name">{{ name }}</span>
                                        </div>
                                        <div class="col-4">
                                            <input type="number" name="{{ ../name }}-{{ name }}" id="variant-{{ ../name }}-{{ name }}"
                                                   oninput="changeVariantData(this, {{@key}}, {{ ../../totalNFTToGenerate }})"
                                                   class="variant-allocate-input-of-{{@key}} form-control custom">
                                        </div>
                                        <div class="col-2 text-left">
                                            <span class="variant-allocate-percentage-of-{{ @key }}">0%</span>
                                        </div>
                                    </div>
                                {{/each}}
                            </div>

                        </div>
                    </div>
                {{/each}}

                <input type="text" name="layersWithVariants" id="layersWithVariants" class="d-none">

                <div class="btn-container mt-4 mx-auto text-center">
                    <a href="{{ previousStepUrl }}" type="button" id="nextButton"
                       class="btn text-white theme-btn back-button mr-4">Back</a>
                    <button type="submit" id="nextButton" class="btn text-white theme-btn next-button">Next</button>
                </div>
            </form>
        </div>
    </div>

</section>

<!-- ========================= hero-section end ========================= -->

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>

<style>
    .swal2-html-container {
        margin-top: 0 !important;
    }
</style>
<script>

    function allocateTraitFromSpreadsheet(traitToAllocate, files, totalNftToGenerate) {
        Swal.fire({
            width: 300,
            position: 'bottom-end',
            title: `Paste your ${traitToAllocate} allocation from a spreadsheet`,
            html:
                    `<p style="font-size: 14px" class="mb-4">Paste in a comma-separated format and click "Use it!"</p>` +
                    `<div class="col-12 m-auto copy-from-csv">` +
                    ((files.length > 1)
                            ? `<textarea rows="10" cols="10" id="csvTextarea" class="form-control w-75 m-auto" placeholder="${files[0].name}, 1000 \n${files[1].name}, 1000"></textarea>`
                            : `<textarea rows="10" cols="10" id="csvTextarea" class="form-control w-75 m-auto" placeholder="${files[0].name}, 1000"></textarea>`) +
                    `</div>`,
            showCloseButton: true,
            showCancelButton: false,
            confirmButtonText: 'Use it!',
        }).then((result) => {
            if (result.isConfirmed) {
                let variantContainer = document.getElementById('variantContainerOf-' + traitToAllocate);
                let allVariantInput = variantContainer.querySelectorAll('[class^="variant-allocate-input-of-"]');
                let allVariantPercent = variantContainer.querySelectorAll('[class^="variant-allocate-percentage-of-"]');
                let csvTextarea = document.getElementById('csvTextarea');
                let csvText = csvTextarea.value.trim();
                if (csvText === '' || csvText === undefined) return;
                let csvArrayByNewLine = csvText.split('\n');
                csvArrayByNewLine.forEach(function (csvLine, index) {
                    let csvArrayByComma = csvLine.split(',');
                    if (csvLine.trim() === '') return;
                    let variantName = csvArrayByComma[0].trim();
                    let variantAllocation = parseInt(csvArrayByComma[1].trim());
                    files.forEach(function (file, index) {
                        if (file.name === variantName) {
                            allVariantInput[index].value = variantAllocation;
                            // allVariantPercent[index].innerText = `${(variantAllocation / totalNftToGenerate) * 100}%`;
                            allVariantInput[index].dispatchEvent(new Event('input'));
                        }
                    });
                });

            }
        })
    }

    function allocateTraitEvenly(traitToAllocate, files, totalNftToGenerate) {
        let evenlyNumber = Math.floor(totalNftToGenerate / files.length);
        let remainder = totalNftToGenerate % files.length;
        let variantContainer = document.getElementById('variantContainerOf-' + traitToAllocate);
        let allVariantInput = variantContainer.querySelectorAll('[class^="variant-allocate-input-of-"]');
        let allVariantPercent = variantContainer.querySelectorAll('[class^="variant-allocate-percentage-of-"]');
        files.forEach(function (file, index) {
            allVariantInput[index].value = evenlyNumber;
            // allVariantPercent[index].innerText = `${(evenlyNumber / totalNftToGenerate) * 100}%`;
            allVariantInput[index].dispatchEvent(new Event('input'));
        });
        if (remainder > 0) {
            allVariantInput[files.length - 1].value = evenlyNumber + remainder;
            // allVariantPercent[files.length - 1].innerText = `${((evenlyNumber + remainder) / totalNftToGenerate) * 100}%`;
            allVariantInput[files.length - 1].dispatchEvent(new Event('input'));
        }
    }

    function changeVariantData(variantInput, fileIndex, totalNftToGenerate) {
        let variantPercentSpan = variantInput.parentElement.parentElement.parentElement.querySelector(`.variant-allocate-percentage-of-${fileIndex}`);
        if (variantInput.value === '' || variantInput.value === undefined || variantInput.value === 0) {
            variantPercentSpan.innerText = '0%';
        } else {
            variantPercentSpan.innerText = `${Math.round((parseInt(variantInput.value) + Number.EPSILON) * 100) / totalNftToGenerate}%`;
        }

        let allVariantInput = variantInput.parentElement.parentElement.parentElement.querySelectorAll('[class^="variant-allocate-input-of-"]');
        let numberLeftText = variantInput.parentElement.parentElement.parentElement.parentElement.querySelector('.number-left-text');
        let totalAllocated = 0;
        allVariantInput.forEach(function (variantInput) {
            if (!variantInput.value) return;
            totalAllocated += parseInt(variantInput.value);
        });

        if (totalAllocated > totalNftToGenerate) {
            return Swal.fire({
                width: 300,
                position: 'bottom-end',
                icon: 'error',
                title: 'Oops...',
                text: 'Total allocated number is greater than total number of NFTs to generate.',
            }).then(() => {
                let previousValue = parseInt(variantInput.value);
                variantInput.value = '';
                variantPercentSpan.innerText = '0%';
                numberLeftText.innerText = `Number left to allocate: #${totalNftToGenerate - totalAllocated + previousValue}`;
            });
        }

        if (totalAllocated === 0) {
            numberLeftText.innerText = `Number left to allocate: #${parseInt(totalNftToGenerate)}`;
        } else {
            numberLeftText.innerText = `Number left to allocate: #${(parseInt(totalNftToGenerate) - totalAllocated)}`;
        }

    }

    function animateLayer(layerTitle) {
        let lottiePlayer = layerTitle.getElementsByTagName('lottie-player')[0];
        let lottie = lottiePlayer.getLottie();
        let allocateTraitContainer = lottiePlayer.parentElement.parentElement.querySelector('.allocate-trait-container');
        if (lottiePlayer.classList.contains('is-animated')) {
            lottie.playSegments([120, 240], true);
            lottiePlayer.classList.remove('is-animated');
            allocateTraitContainer.classList.remove(...['animate__animated', 'animate__fadeIn']);
            allocateTraitContainer.classList.add(...['animate__animated', 'animate__fadeOut']);
            setTimeout(() => {
                allocateTraitContainer.classList.add('d-none')
            }, 200)
        } else {
            lottie.playSegments([0, 120], true);
            lottiePlayer.classList.add('is-animated');
            allocateTraitContainer.classList.remove('d-none')
            allocateTraitContainer.classList.add(...['animate__animated', 'animate__fadeIn']);
            allocateTraitContainer.classList.remove(...['animate__animated', 'animate__fadeOut']);
        }
    }

    function animateLayerTitleOnMouseEnter(element) {
        let lottiePlayer = element.getElementsByTagName('lottie-player')[0];
        if (lottiePlayer.classList.contains('is-animated')) return;
        if (!element.classList.contains('animate__pulse')) {
            element.classList.add(...['animate__animated', 'animate__pulse']);
        }
    }

    function animateLayerTitleOnMouseLeave(element) {
        let lottiePlayer = element.getElementsByTagName('lottie-player')[0];
        if (lottiePlayer.classList.contains('is-animated')) return;
        if (element.classList.contains('animate__pulse')) {
            element.classList.remove(...['animate__animated', 'animate__pulse']);
        }
    }

    let fifthStepForm = document.getElementById('fifthStepForm');
    function validateForm(entries) {
        let formDataArray = [];
        for (let [key, value] of entries) {
            let layer = key.split('-')[0];
            let trait = key.split('-')[1];
            // if (value === '' || value === null || value === undefined) {
            //     return {
            //         status: false,
            //         message: `You need to allocate number of variants for ${layer} layer in ${trait} trait.`
            //     }
            // }
            formDataArray.push({
                layerName: layer,
                traitWithRarity: `${trait}#${value}`
            });
        }

        return {
            success: true,
            formDataArray: formDataArray
        }
    }
    fifthStepForm.addEventListener('submit', (e) => {
        e.preventDefault()

        let formData = new FormData(fifthStepForm);
        let validate = this.validateForm(formData.entries());
        if (!validate.success) {
            Swal.fire({
                width: 300,
                position: 'bottom-end',
                icon: 'error',
                title: 'Oops...',
                text: validate.message,
            });
            return;
        }
        console.log(validate.formDataArray)
        formData.append('layersWithVariants', JSON.stringify(validate.formDataArray));
        document.getElementById('layersWithVariants').setAttribute('value', "");
        document.getElementById('layersWithVariants').setAttribute('value', JSON.stringify(validate.formDataArray));

        fifthStepForm.submit();

        // const options = {
        //     method: 'POST',
        //     body: formData,
        // };
        //
        // fetch('/nft-creation/save-fifth-step', options)
        //         .then(response => response.json())
        //         .catch(error => console.error('Error:', error))
        //         .then(response => {
        //             if (response && response.success === false) {
        //                 return Swal.fire({
        //                     width: 300,
        //                     position: 'bottom-end',
        //                     icon: 'error',
        //                     title: 'Oops...',
        //                     text: response.message,
        //                 });
        //             }
        //
        //             console.log(response)
        //         });

    })

    setTimeout(() => {
        let allLayerTitles = document.querySelectorAll('.layer-title');
        console.log(allLayerTitles)
        allLayerTitles[0].click()
    }, 200);
</script>